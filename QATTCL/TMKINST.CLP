/*********************************************************************/
/*                                                                   */
/* NAME: TMKINST - INSTALLATION OF MAKE TOOL                         */
/*                 CREATE THE USER-SPECIFIED LIBRARY (IF NOT EXIST), */
/*                 THE MESSAGE FILE AND PROGRAMS NEEDED BY MAKE TOOL.*/
/*                                                                   */
/* PARAMETER:                                                        */
/*       OBJL      USER-SPECIFED LIBRARY NAME                        */
/*                 IF THE SPECIFED LIBRARY EXISTS, ALL THE OBJECTS   */
/*                 FOR MAKE TOOL WILL BE RE-CREATED IN THE LIBRARY   */
/*                 AND THE OLD ONES WILL BE OVERRIDED.               */
/*                 IF THE LIBRARY DOES NOT EXIST, IT WILL BE CREATED */
/*                 AND ALL THE OBJECTS WILL BE CREATED IN IT.        */
/*                                                                   */
/* INVOCATION:     CALL TMKINST OBJL                                 */
/*                                                                   */
/*********************************************************************/
TMKINST:     PGM      PARM(&SRCL &OBJL)
             DCL      VAR(&SRCL)           TYPE(*CHAR) LEN(10)
             DCL      VAR(&OBJL)           TYPE(*CHAR) LEN(10)
             DCL      VAR(&DBG)            TYPE(*CHAR) LEN(10) VALUE(*NONE)

/*********** CREATE LIBRARY ******************************************/
             MONMSG   MSGID(CPF2111)      EXEC(GOTO CMDLBL(CHKCRTCPGM))

/*********** CREATE ALL C AND CL PROGRAMS ****************************/
 CHKCRTCPGM: CHKOBJ   OBJ(QSYS/CRTCMOD)    OBJTYPE(*CMD)
             MONMSG   MSGID(CPF0000) EXEC(DO)
             SNDPGMMSG   MSGID(CPF9898) MSGF(QCPFMSG) +
                      MSGTYPE(*ESCAPE) +
                      MSGDTA('CRTCMOD COMMAND MUST EXIST TO CREATE +
                      MAKE utility' )
             ENDDO

            CRTCMOD  MODULE(&OBJL/TMKMAKEC)  SRCFILE(&SRCL/QATTSYSC) DBGVIEW(&DBG)
            CRTCMOD  MODULE(&OBJL/TMKMAKER)  SRCFILE(&SRCL/QATTSYSC) DBGVIEW(&DBG)
            CRTCMOD  MODULE(&OBJL/TMKPARSE)  SRCFILE(&SRCL/QATTSYSC) DBGVIEW(&DBG)
            CRTCMOD  MODULE(&OBJL/TMKFILE)   SRCFILE(&SRCL/QATTSYSC) DBGVIEW(&DBG)
            CRTCMOD  MODULE(&OBJL/TMKBUILT)  SRCFILE(&SRCL/QATTSYSC) DBGVIEW(&DBG)
            CRTCMOD  MODULE(&OBJL/TMKMSGHD)  SRCFILE(&SRCL/QATTSYSC) DBGVIEW(&DBG)
            CRTCMOD  MODULE(&OBJL/TMKDICT)   SRCFILE(&SRCL/QATTSYSC) DBGVIEW(&DBG)
            CRTCMOD  MODULE(&OBJL/TMKOPTIO)  SRCFILE(&SRCL/QATTSYSC) DBGVIEW(&DBG)
            CRTCMOD  MODULE(&OBJL/TMKUTIL)   SRCFILE(&SRCL/QATTSYSC) DBGVIEW(&DBG)
            CRTCMOD  MODULE(&OBJL/TMKEXPR)   SRCFILE(&SRCL/QATTSYSC) DBGVIEW(&DBG)
            CRTCLPGM PGM(&OBJL/TMKTCHMB)  SRCFILE(&SRCL/QATTCL)
            CRTCLPGM PGM(&OBJL/TMKTCHOB)  SRCFILE(&SRCL/QATTCL)

/*********** BINDING ALL C PROGRAMS **********************************/
             CRTPGM       PGM(&OBJL/TMKMAKEC) +
                          MODULE((&OBJL/TMKMAKER) (&OBJL/TMKFILE) +
                          (&OBJL/TMKPARSE) (&OBJL/TMKOPTIO)     +
                          (&OBJL/TMKBUILT) (&OBJL/TMKDICT)       +
                          (&OBJL/TMKUTIL)   (&OBJL/TMKMSGHD)     +
                          (&OBJL/TMKEXPR) (&OBJL/TMKMAKEC))

/*********** CREATE QMAKSRC FILE AND ADD BUILTIN IN QMAKSRC **********/
             CHKOBJ     OBJ(&OBJL/QMAKSRC) OBJTYPE(*FILE)
             MONMSG     MSGID(CPF9801)     EXEC(DO)
             CRTSRCPF   FILE(&OBJL/QMAKSRC) TEXT('MAKE TOOL BUITLIN')
             ENDDO
             CPYSRCF    FROMFILE(&SRCL/QATTSYSC) +
                          TOFILE(&OBJL/QMAKSRC)     +
                          FROMMBR(TMKBLTF) TOMBR(BUILTIN)
             MONMSG     MSGID(CPF2888)     EXEC(DO)
             SNDPGMMSG   MSGID(CPF9898) MSGF(QCPFMSG) +
                      MSGTYPE(*ESCAPE) +
                      MSGDTA('QMAKSRC in the library cannot be a +
                      DDM file' )
             ENDDO

/*********** CREATE MESSAGE FILE IN USER SPECIFIED LIBRARY ***********/
             CHKOBJ     OBJ(&OBJL/TMKMSGF) OBJTYPE(*MSGF)
             MONMSG     MSGID(CPF0000)     EXEC(GOTO CMDLBL(NOMSGF))
             DLTMSGF    MSGF(&OBJL/TMKMSGF)
NOMSGF:      CRTMSGF    MSGF(&OBJL/TMKMSGF) TEXT('MAKE TOOL MESSAGES')

/*********** ADD MESSAGES TO MESSAGE FILE ****************************/
ADDMSGD MSGID(TMK0001) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Start Make Tool') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0002) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Target Labels') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0003) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Description File') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0004) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Make Library') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0005) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('File Member') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0006) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Macro Definitions') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0007) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Options') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0008) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Source Margin') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0009) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Left Margin') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0010) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Right Margin') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0011) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Return Code Handling') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0012) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Severity') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0013) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('User Message Log') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0014) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Method') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK0015) +
  LVL(*CURRENT 01) +
  DMPLST(*NONE) +
  MSG('Internal Service Options') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9001) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The inference rule specified in line &1 does n+
ot conform to the specification. Possibly dependents are specified in the defin+
ition. &N Recovery  . . . :   Correct the invalid rule in the description file +
and try again.') +
  MSG('Invalid inference rule specification in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9002) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The dependents for the .SUFFIXES rule in the d+
escription file do not contain valid object specifications. Possibly missing th+
g e ''.'' character in front of the dependent name. &N Recovery  . . . :   Corr+
ect the invalid object name in the description file and try again.') +
  MSG('Invalid .SUFFIXES dependents specification in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9003) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Recovery  . . . :   Correct the description file include directive-
 nesting structure and try again.') +
  MSG('Nested include directive exceeded the maximum (32) allowed in line &1.')-
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9004) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   An apparent macro reference was found, but the-
 closing parenthesis are missing. &N Recovery  . . . :   Verify the parenthesis-
 for macro references are correct and try again.') +
  MSG('Macro parenthesis mismatched in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9005) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5) (*CHAR 32)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The specified target in the description file n+
eeds to be processed, but neither an explicit rule or an inference rule provide-
 sufficient information for TMKMAKE to proceed. &N Recovery  . . . :   Verify t+
he rules in the description file is correct and try again.') +
  MSG('Do not know how to process target &2 in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9006) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 1000)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   User message. &N Recovery  . . . :   None.') +
  MSG('&1') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9007) +
  LVL(*CURRENT 01) +
  SEV(00) +
  LOGPRB(*NO) +
  FMT((*CHAR 34)) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The MACRO &1 defined in the TMKMAKE command do+
es not contains a valid macro definition; the ''='' character is missing in the-
 the macro definition. &N Recovery  . . . :   Retry the TMKMAKE command with th+
e proper macro definition syntax') +
  MSG('Invalid macro definition in TMKMAKE command, ''='' character expected.')-
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9008) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   More than one rules with commands sequence are-
 defined using the same target. &N Recovery  . . . :   Correct the invalid rule-
 in the description file and try again.') +
  MSG('Multiple rules defined for the same target in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9009) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5) (*CHAR 32)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The inference rule specified in line &1 does n+
ot conform to the specification. &N Recovery  . . . :   Correct the invalid rul+
e in the description file and try again.') +
  MSG('Unable to open include file &2 in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9010) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The specified text line in the description fil+
e does not conform to the syntax of a dependency rule for the TMKMAKE command. +
&N Recovery  . . . :   Correct the invalid rule in the description file and try-
 again.') +
  MSG('Invalid desription rule in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9011) +
  LVL(*CURRENT 01) +
  SEV(00) +
  LOGPRB(*NO) +
  FMT((*CHAR 50)) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The TMKMAKE command was trying to allocate sto+
rage from the program heap at location &1 and was unsuccessful. &N Recovery  . +
. . :   Decrease the complexity of the description file and try again.') +
  MSG('Run out of heap space.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9012) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 32)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   TMKMAKE command was unable to open the descrip+
tion file as specified in the command. &N Recovery  . . . :   Make sure the des+
cription file exists in the specified location and try again.') +
  MSG('Unable to open description file &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9013) +
  LVL(*CURRENT 01) +
  SEV(00) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The MARGIN parameters in the TMKMAKE command a+
re invalid. &N Recovery  . . . :   None.') +
  MSG('Invalid MARGIN specification in the TMKMAKE command, parameters ignored.+
') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9014) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 32)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   Target(s) specified in the TMKMAKE command can-
 not be found in the description file. &N Recovery  . . . :   Correct the targe+
t name(s) in the command and try again.') +
  MSG('Target &1 not found in description file.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9015) +
  LVL(*CURRENT 01) +
  SEV(00) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   Built-in inference rule file, BUILTIN.QMAKSRC,+
 was not found in *CURLIB or *LIBL, no built-in rules are applied to the curren+
t TMKMAKE command processing. &N Recovery  . . . :   None.') +
  MSG('Default built-in rule file BUILTIN.QMAKSRC not found.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9016) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 1024)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The TMKMAKE command is terminated by a user re+
quested error directive in the description file. &N Recovery  . . . :   None.')-
  MSG('Error directive: &1') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9017) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   An if or elif directive was found, but an inva+
lid or no expression was found after the if or elif keyword. &N Recovery  . . .-
 :   Correct the invalid directive expression in the description file and try a+
gain.') +
  MSG('No expression in if or elif directives in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9018) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5) (*CHAR 32)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The specified directive was found in the descr+
iption file, but it is not recognized by the TMKMAKE command. &N Recovery  . . +
. :   Remove the invalid directive from the description file and try again.') +
  MSG('Unknown directive &2 in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9019) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   As stated. &N Recovery  . . . :   Correct the +
invalid expression in the description file and try again.') +
  MSG('Divided by zero in the if directive expression in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9020) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The expression in the if directive does not co+
ntain an valid arithmetic expression. &N Recovery  . . . :   Correct the invali+
d expression in the description file and try again.') +
  MSG('Syntax error found in if directive expression in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9021) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The size of the command specified in the descr+
iption file which the TMKMAKE command needs to process, after all the macro sub+
stitution, exceeds the limit set by QCMDEXC. &N Recovery  . . . :   Make sure t+
he command needs to be processed in the description file is less than 3000 char+
acters.') +
  MSG('The command in line &1 exceeds the 3000 characters limit.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9022) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   As stated. &N Recovery  . . . :   Correct the +
invalid expression in the description file and try again.') +
  MSG('Invalid octal number in conditional directive expression in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9023) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   As stated. &N Recovery  . . . :   Correct the +
invalid expression in the description file and try again.') +
  MSG('Invalid hexadecimal number in conditional directive expression in line &+
1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9024) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   As stated. &N Recovery  . . . :   Reduce the c+
omplexity of the expression in the description file and try again.') +
  MSG('Conditional directive expression too complicated in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9025) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   Problems were detected by the TMKMAKE command +
when trying to evaluate an expression in the if or elif directives. &N Recovery-
  . . . :   Reduce the complexity of the expression in the description file and-
 try again.') +
  MSG('Internal conditional directive expression error in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9026) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   Invalid characters, such as non numeric charac+
ter and operators which are not supported by the TMKMAKE command, are found in +
the conditional directive expression. &N Recovery  . . . :   Correct the invali+
d expression in the description file and try again.') +
  MSG('Invalid characters in conditional directive expression in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9027) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   Macro expression exceeds the 3000 character li+
mit. &N Recovery  . . . :   Make sure any macro expansion does not exceed the 3+
000 characters limit.') +
  MSG('Macro expansion exceeds 3000 characters limit in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9028) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The elif directive was found in the descriptio+
n file where it was not expected. &N Recovery  . . . :   Correct the misplaced +
elif directive in the description file and try again.') +
  MSG('Misplaced elif directive in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9029) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The else directive was found in the descriptio+
n file where it was not expected. &N Recovery  . . . :   Correct the misplaced +
else directive in the description file and try again.') +
  MSG('Misplaced else directive in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9030) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The endif directive was found in the descripti+
on file where it was not expected. &N Recovery  . . . :   Correct the misplaced+
 endif directive in the description file and try again.') +
  MSG('Misplaced endif directive in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9031) +
  LVL(*CURRENT 01) +
  SEV(00) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The end of the description file was encountere+
d when the TMKMAKE command expected more input. &N Recovery  . . . :   Make sur+
e all rules in the description file are of valid syntax and try again.') +
  MSG('Unexpected end of file encountered.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9032) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The command text passed to QCMDEXC was rejecte+
d due to invalid command syntax. &N Recovery  . . . :   Correct the invalid com+
mand sequences in the description file and try again.') +
  MSG('Invalid command syntax in line &1; rejected by QCMDEXC.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9033) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   Either an exception has occurred or the return+
 code returned by the command executed by TMKMAKE exceeds the severity level se+
t by the TMKMAKE command. &N Recovery  . . . :   Check the description file and+
 make sure the command being executed is correct and try again.') +
  MSG('Command executed by TMKMAKE failed in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9034) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5) (*CHAR 22)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   *ALL is specified in the SRCMBR field in the S+
TRMAKE command and there are more members in the source file than the QUSLMBR p+
rogram can handled. The number of members processed is limited to &1. &N Recove+
ry  . . . :   Check the source file and make sure the number of members in file-
 &2 does not exceed &1.') +
  MSG('Number of members in file &2 exceeds the limit.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9035) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 22)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   *ALL is specified in the SRCMBR field in the S+
TRMAKE command and no member is found in the source file. &N Recovery  . . . : -
  Check the source file and make sure there is at least one member in the file.+
') +
  MSG('No member in file &1 is found.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9036) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5) (*CHAR 9)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   Keyword &2 with invalid format was found in th+
e description file. &N Recovery  . . . :   Keyword must either be followed by a+
a '':'' character or no text at all. Correct the syntax of the keyword &2 in th+
e description file and try again.') +
  MSG('Invalid format for keyword &2 in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9037) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   Invalid inference rule format is found in the +
description file. Possibly missing '':'' character in the rule definition. Corr+
ect the error and try again. &N Recovery  . . . :   Correct the inference rule +
format and try again.') +
  MSG('Invalid inference rule format in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9038) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   Invalid inference rule format is found in the +
description file and no target can be identified. Correct the error and try aga+
in. &N Recovery  . . . :   Correct the inference rule format and try again.') +
  MSG('Invalid inference rule format, no target found in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9039) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   Command sequence with no associated target def+
inition is found in the description. &N Recovery  . . . :   Correct the inferen+
ce rule by adding a target definition in the rule and try again.') +
  MSG('Command sequence is found with no associated target definition in line &+
1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9040) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   An invalid object specification is found in th+
e description file. &N Recovery  . . . :   Correct the invalid object specifica+
tion and try again.') +
  MSG('Invalid object specification found in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9041) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5) (*CHAR 9)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   "&2" is an unsupported keyword starting with a+
 ''.'' character. &N Recovery  . . . :   Correct the syntax of the keyword &2 i+
n the descriptin file and try again.') +
  MSG('Unknown keyword &2 in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9042) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5) (*CHAR 32)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The specified target in the description file i+
s processed recursively according to the rule defined. &N Recovery  . . . :   V+
erigy the rule in the description file is correct and try again.') +
  MSG('TMKMAKE has detected recursive processing for ''&2'' in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9043) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5) (*CHAR 32)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The specified target has been processed by TMK+
MAKE and is now up-to-date. &N Recovery  . . . :   None.') +
  MSG('''&2'' is up-to-date in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9044) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The specified severity limit for the ''-'' pre+
fix does not conform to specification.  There must have at least 1 blank charac+
ter after the severity limit. &N Recovery  . . . :   Correct the description fi+
le and try again.') +
  MSG('Invalid ''-'' prefix severity limit specification in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9045) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5) (*CHAR 34)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   The macro &2 was not previously defined. &N Re+
covery  . . . :   Define the macro &2 and try again.') +
  MSG('Macro &2 in line &1 can not be undefined.')                     +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9046) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Recovery  . . . :   Correct the description file conditional direc+
tive nesting structure and try again.') +
 MSG('Nested conditional directives exceeded the maximum allowed in line &1.') +
  MSGF(&OBJL/TMKMSGF)
ADDMSGD MSGID(TMK9047) +
  LVL(*CURRENT 01) +
  SEV(00) +
  FMT((*CHAR 5)) +
  LOGPRB(*NO) +
  DMPLST(*NONE) +
  ALROPT(*NO ) +
  SECLVL('&N Cause . . . . . :   An invalid macro syntax was found in &1.  Prob+
ably missing ''='' character in output translation macro format. &N Recovery  .-
 . . :   Correct the invalid macro syntax and try again.') +
  MSG('Invalid macro syntax in line &1.') +
  MSGF(&OBJL/TMKMSGF)

/*********** CREATE COMMAND TMKMAKE **********************************/
             CHKOBJ     OBJ(&OBJL/TMKMAKE) OBJTYPE(*CMD)
             MONMSG     MSGID(CPF0000)     EXEC(GOTO CMDLBL(NOCMD))
             DLTCMD     CMD(&OBJL/TMKMAKE)
NOCMD:       CRTCMD     CMD(&OBJL/TMKMAKE) PGM(&OBJL/TMKMAKEC) +
                          SRCFILE(&SRCL/QATTCMD) +
                          PMTFILE(&OBJL/TMKMSGF)
/*********** CREATE TMKDLT *******************************************/
             CRTCLPGM   PGM(&OBJL/TMKDLT)  SRCFILE(&SRCL/QATTCL)
ENDPGM

